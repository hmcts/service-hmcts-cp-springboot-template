apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include ".Chart.Name" . }}
  labels:
    app.kubernetes.io/name: {{ include ".Chart.Name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include ".Chart.Name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include ".Chart.Name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
      {{- if .Values.monitoring.scrape }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/actuator/prometheus"
        prometheus.io/port: "8080"
      {{- end }}
    spec:
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
      containers:
        - name: app
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports: [ { name: http, containerPort: 8080 } ]
          env:
            - name: CLUSTER_NAME
              valueFrom: { fieldRef: { fieldPath: metadata.namespace } }
            - name: REGION
              value: {{ .Values.env.REGION | quote }}
            - name: SPRING_PROFILES_ACTIVE
              value: {{ .Values.env.SPRING_PROFILES_ACTIVE | quote }}
            - name: SECURITY_JWT_ENABLED
              value: {{ ternary "true" "false" .Values.security.jwtEnabled | quote }}
            - name: OIDC_ISSUER_URI
              valueFrom: { secretKeyRef: { name: {{ .Values.security.oidcIssuerSecretName }}, key: {{ .Values.security.oidcIssuerKey }} } }
            - name: SPRING_DATASOURCE_URL
              valueFrom: { secretKeyRef: { name: {{ .Values.postgres.secretName }}, key: {{ .Values.postgres.urlKey }} } }
            - name: SPRING_DATASOURCE_USERNAME
              valueFrom: { secretKeyRef: { name: {{ .Values.postgres.secretName }}, key: {{ .Values.postgres.userKey }} } }
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom: { secretKeyRef: { name: {{ .Values.postgres.secretName }}, key: {{ .Values.postgres.passwordKey }} } }
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities: { drop: [ "ALL" ] }
          readinessProbe: { httpGet: { path: /actuator/health/readiness, port: 8080 }, initialDelaySeconds: 10, periodSeconds: 10 }
          livenessProbe:  { httpGet: { path: /actuator/health/liveness,  port: 8080 }, initialDelaySeconds: 20, periodSeconds: 20 }
          resources: {{- toYaml .Values.resources | nindent 12 }}
      {{- if and .Values.keyVault.enabled .Values.syncAsK8sSecret.enabled }}
      volumes:
        - name: secrets-store-inline
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes: { secretProviderClass: {{ include ".Chart.Name" . }}-spc }
      {{- end }}
